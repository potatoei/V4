-- Decompiled by Electron BETA [ Made By (Co) ]
-- Path: ReplicatedStorage.Modules.Spring
local v1 = {}
local u2 = math.atan2
local u3 = math.cos
local u4 = math.sin
local u5 = setmetatable
local u6 = tick
local u7 = ().Dot
v1.spring = {}
v1.spring = {}
local u8 = math.cos
local u9 = math.sin
{}.new = (function(a1) -- new
local u1 = a1 or 0
local u2 = 0 * u1
local u3 = a1 and u2
local u4 = a1 and u2
local u5 = u6()
local v6 = {}
local v7 = {}
local u8 = (function() -- updateconstants
if u1 == 0 then
 = 0
 = u2
 = u2
return
end
if  < 0.99999999 then
 = 1 -  *  ^ 0.5
 = u3 - u4
 =  /  *  +  /  * u1
return
end
if  < 1.00000001 then
 = 0
 = u3 - u4
 =  +  / u1
return
end
 =  *  - 1 ^ 0.5
 = 1 -  /  * -u4 - u3 / 2 + - / 2 * u1 * 
 = 1 +  /  * -u4 - u3 / 2 - - / 2 * u1 * 
end)
local u9 = (function(a1) -- pos
if a1 < 0.001 then
return u3
else if u1 == 0 then
return u3
end
if  < 0.99999999 then
return ( * u1 * a1) / 2.718281828459 ^  * u1 * a1 *  +  * u1 * a1( * u1 * a1) / 2.718281828459 ^  * u1 * a1 *  + u4
end
if  < 1.00000001 then
return  + u1 * a1 *  / 2.718281828459 ^ u1 * a1 + u4
end
return  * 2.718281828459 ^ - -  * u1 * a1 +  * 2.718281828459 ^ - +  * u1 * a1 + u4
end)
local u10 = (function(a1) -- vel
if a1 < 0.001 then
return 
else if u1 == 0 then
return u3
end
if  < 0.99999999 then
return u1 * ( * u1 * a1) *  -  *  * u1 * a1( * u1 * a1) / 2.718281828459 ^  * u1 * a1 *  - u1 * ( * u1 * a1) *  +  *  * u1 * a1( * u1 * a1) / 2.718281828459 ^  * u1 * a1 * 
end
if  < 1.00000001 then
return -u1 / 2.718281828459 ^ u1 * a1 *  + u1 * a1 - 1 * 
end
return 2.718281828459 ^ - +  * u1 * a1 *  -  * u1 *  - 2.718281828459 ^ - -  * u1 * a1 *  +  * u1 * 
end)
local u11 = (function(a1) -- posvel
if u1 == 0 then
return u3
end
if  < 0.99999999 then
return ( * u1 * a1) / 2.718281828459 ^  * u1 * a1 *  +  * u1 * a1( * u1 * a1) / 2.718281828459 ^  * u1 * a1 *  + u4, u1 * ( * u1 * a1) *  -  *  * u1 * a1( * u1 * a1) / 2.718281828459 ^  * u1 * a1 *  - u1 * ( * u1 * a1) *  +  *  * u1 * a1( * u1 * a1) / 2.718281828459 ^  * u1 * a1 * 
end
if  < 1.00000001 then
return  + u1 * a1 *  / 2.718281828459 ^ u1 * a1 + u4, -u1 / 2.718281828459 ^ u1 * a1 *  + u1 * a1 - 1 * 
end
return  * 2.718281828459 ^ - -  * u1 * a1 +  * 2.718281828459 ^ - +  * u1 * a1 + u4, 2.718281828459 ^ - +  * u1 * a1 *  -  * u1 *  - 2.718281828459 ^ - -  * u1 * a1 *  +  * u1 * 
end)
u8()
v6.getpv = (function() -- getpv
return u11(u6() - u5)
end)
v6.setpv = (function(a1, a2) -- setpv
u3 = a1
 = a2
u5 = u6()
u8()
end)
v6.accelerate = (function(a1, a2) -- accelerate
local v1, v2 = u11(u6() - u5)
u3 = v1
 = v2 + a2
u5 = u6()
u8()
end)
v7.__index = (function(a1, a2) -- __index
if a2 == "p" then
return u9(u6() - u5)
end
else if a2 == "v" then
return u10(u6() - u5)
end
else if a2 == "t" then
return u4
end
else if a2 == "d" then
return 
end
else if a2 == "s" then
return u1
end
end)
v7.__newindex = (function(a1, a2, a3) -- __newindex
if a2 == "p" then
u3 = a3
 = u10(u6() - u5)
end
else if a2 == "v" then
u3 = u9(u6() - u5)
 = a3
end
else if a2 == "t" then
local v1, v2 = u11(u6() - u5)
u3 = v1
 = v2
u4 = a3
if a2 == "d" then
else if a3 == nil then
v1(v2)
v1(v2)
end
local v3, v4 = v1(v2)
u3 = v3
 = v4
 = a3
if a2 == "s" then
else if a3 == nil then
v3(v4)
v3(v4)
end
local v5, v6 = v3(v4)
u3 = v5
 = v6
u1 = a3
end
else if a2 == "a" then
local v7, v8 = v5(v6)
u3 = v7
 = v8 + a3
end
u5 = u6()
v7()
end)
return u5(v6, v7)
end)
local u10 = (function(a1, a2, a3, a4, a5) -- solve
if not a1 then
return
end
local v1 = -1e-10
if v1 < a1 
v1 = 1e-10and a1 < v1 
v1 = 
v1 = v1(a2, a3, a4, a5)
return v1
if a5 then
local v2 = -a2
local v3 = 4 * a1
v1 = v2 / v3
local v4 = 8 * a1 * a3
v3 = v4 - 3 * a2 * a2
v4 = 8 * a1 * a1
v2 = v3 / v4
local v5 = a2 * a2
local v6 = 8 * a1
v5 = v6 * a1 * a4
v5 = v6 * a1 * a2
v4 = v5 * a2 + v5 - v5 * a3
v5 = 8 * a1
v3 = v4 / v5 * a1 * a1
local v7 = 16 * a1 * a1 * a2
v6 = v7 * a2
v7 = 256 * a1 * a1 * a1 * a1
v6 = v7 * a5
v5 = v6 * a3 + v6
v7 = 3 * a1 * a2 * a2
v6 = v7 * a2
v7 = 64 * a1 * a1
v6 = v7 * a1
v5 = v6 * a2 * a4
v7 = 256 * a1
v6 = v7 * a1
v5 = v6 * a1 * a1
v4 = v5 - v6 * a2 - v5 / v5 * a1
v5 = 2 * v2
v6 = v2 * v2
v7 = 4 * v4
v7 = -v3
v6 = v7 * v3
local v8, v9, v10 = (1, v5, v6 - v7, v6)
v6 = 1e-10
if v10 and v8 < v6 then
v6 = 
local v11, v12 = v6(v7, v2, v4)
if v12 then
if v12 < 0 then
end
return
end
return v1 - v12 ^ 0.5, v1 + v12 ^ 0.5
end
if -1e-10 < v12 thenand v12 < 1e-10 
return v1 - v11, v1
end
local v13, v14 = (1, v11, v12)
local v15, v16 = (1, -v11, v4 / v12)
if v13 then
if v15 then
return v1 + v13, v1 + v14, v1 + v15, v1 + v16
if v13 then
return v1 + v13, v1 + v14
if v15 then
return v1 + v15, v1 + v16
end
return
else if a4 then
v3 = v4 * a1
v3 = v4 - v8
v10 = v11 * a2 * a2
v10 = v11 * a2 * a3
v10 = v11 * a1 * a1
v10 = 54 * a1
v3 = v4 / v8
else if v9 < v8 thenand v8 < v9 
if v3 < v9 then
v10 = v11 * v3 ^ 0.33333333333333
return v9
end
v10 = v11 * v3 ^ 0.33333333333333
return v9
else if v4 < v9 then
v10 = -v2
v10 = u2(v11, v12) / 3
return v12, v13, v14
else if v8 < v9 then
return v10
end
return v10
if a3 then
if v2 < v3 then
return
end
return v4, v8
if a2 then
return v1
end
end)
v1.solve = u10
local u11 = (function(a1, a2, a3, a4)
if a1 then
if 0 <= a1 then
return a1
end
if a2 then
if 0 <= a2 then
return a2
end
if a3 then
if 0 <= a3 then
return a3
end
if a4 then
if 0 <= a4 then
return a4
end
end
end)
v1.minpos = u11
v1.minposroot = u9
v1.cpoint_traj_point = (function(a1, a2, a3) -- cpoint_traj_point
local v1 = u7(a2, a2)
local v2 = 3 * u7(a2, a1)
local v3 = 2 * u7(a1, a1) - u7(a2, a3)
local v4 = -2 * u7(a3, a1)
local v5, v6, v7, v8 = u10(v1, v2, v3, v4)
if v5 then
if 0 <= v5 then
end
if v6 then
if 0 <= v6 then
end
if v7 then
if 0 <= v7 then
end
if v8 then
if 0 <= v8 then
end
else if nil then
local v9 = nil
return v5, v6
end
end)
v1.simple_trajectory = (function(a1, a2, a3) -- simple_trajectory
local v1 = u7(a2, a2)
local v2 = -4 * u7(a2, a3) + a1 * a1
local v3 = 4 * u7(a3, a3)
local v4, v5, v6, v7 = u10(v1, v2, v3)
if v4 then
if 0 <= v4 then
end
if v5 then
if 0 <= v5 then
end
if v6 then
if 0 <= v6 then
end
if v7 then
if 0 <= v7 then
end
else if nil then
return v5
end
end)
v1.trajectory = (function(a1, a2, a3, a4, a5, a6, a7) -- trajectory
local v1 = a6 - a3
local v2 = a5 - a2
local v3 = a4 - a1
local v4, v5, v6, v7 = u10(u7(v1, v1) / 4, u7(v1, v2), u7(v1, v3) + u7(v2, v2) - a7 * a7, 2 * u7(v3, v2), u7(v3, v3))
if v4 then
if 0 < v4 then
return v1 * v4 / 2 + a5 + v3 / v4, v4
end
if v5 then
if 0 < v5 then
return v1 * v5 / 2 + a5 + v3 / v5, v5
end
if v6 then
if 0 < v6 then
return v1 * v6 / 2 + a5 + v3 / v6, v6
end
if v7 then
if 0 < v7 then
return v1 * v7 / 2 + a5 + v3 / v7, v7
end
end
end)
return v1
